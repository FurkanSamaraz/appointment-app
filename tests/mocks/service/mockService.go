// Code generated by MockGen. DO NOT EDIT.
// Source: meeting_app/internal/app/service (interfaces: IService)

// Package service is a generated GoMock package.
package service

import (
	api_structures "meeting_app/internal/app/structures"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// CreateService mocks base method.
func (m *MockIService) CreateService(arg0 api_structures.ServiceForm) ([]api_structures.ServiceForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", arg0)
	ret0, _ := ret[0].([]api_structures.ServiceForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService.
func (mr *MockIServiceMockRecorder) CreateService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockIService)(nil).CreateService), arg0)
}

// CreateServiceMultiple mocks base method.
func (m *MockIService) CreateServiceMultiple(arg0 []api_structures.ServiceForm) ([]api_structures.ServiceForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceMultiple", arg0)
	ret0, _ := ret[0].([]api_structures.ServiceForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceMultiple indicates an expected call of CreateServiceMultiple.
func (mr *MockIServiceMockRecorder) CreateServiceMultiple(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceMultiple", reflect.TypeOf((*MockIService)(nil).CreateServiceMultiple), arg0)
}

// DeleteService mocks base method.
func (m *MockIService) DeleteService(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockIServiceMockRecorder) DeleteService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockIService)(nil).DeleteService), arg0)
}

// GetService mocks base method.
func (m *MockIService) GetService(arg0 api_structures.ServiceFilter) ([]api_structures.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", arg0)
	ret0, _ := ret[0].([]api_structures.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockIServiceMockRecorder) GetService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockIService)(nil).GetService), arg0)
}

// GetServiceById mocks base method.
func (m *MockIService) GetServiceById(arg0 uuid.UUID) (api_structures.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceById", arg0)
	ret0, _ := ret[0].(api_structures.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceById indicates an expected call of GetServiceById.
func (mr *MockIServiceMockRecorder) GetServiceById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceById", reflect.TypeOf((*MockIService)(nil).GetServiceById), arg0)
}

// UpdateService mocks base method.
func (m *MockIService) UpdateService(arg0 uuid.UUID, arg1 api_structures.ServiceEdit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockIServiceMockRecorder) UpdateService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockIService)(nil).UpdateService), arg0, arg1)
}

// UpdateServiceMultiple mocks base method.
func (m *MockIService) UpdateServiceMultiple(arg0 []api_structures.ServiceEdit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceMultiple", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceMultiple indicates an expected call of UpdateServiceMultiple.
func (mr *MockIServiceMockRecorder) UpdateServiceMultiple(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceMultiple", reflect.TypeOf((*MockIService)(nil).UpdateServiceMultiple), arg0)
}
